import cv2
import numpy as np
import matplotlib.pyplot as plt




# ============================================================================
# ============================================================================
# خواندن تصویر

image_path = 'Test_data/03.jpg'
image = cv2.imread(image_path)

# ============================================================================
# ============================================================================
# تبدیل رنگ عکس به خاکستری

gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# ============================================================================
# ============================================================================
# نمایش تصویر اصلی و تصویر خاکستری در کنار هم

plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.title('Original Image')
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))

plt.subplot(1, 2, 2)
plt.title('Gray Image')
plt.imshow(gray_image, cmap='gray')
plt.show()






# ============================================================================
# ============================================================================
# اعمال فیلتر میانه برای حذف نویز
# ماتریکس های میانه باید اعداد فرد باشندبرای اعمال فیلتر

denoised_image = cv2.medianBlur(gray_image, 3)

# ============================================================================
# ============================================================================
# نمایش تصویر خاکستری و تصویر بدون نویز

plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.title('Gray Image')
plt.imshow(gray_image, cmap='gray')

plt.subplot(1, 2, 2)
plt.title('Denoised Image')
plt.imshow(denoised_image, cmap='gray')
plt.show()








# ============================================================================
# ============================================================================
# تشخیص لبه‌ها با استفاده از الگوریتم Canny
# مقدار استانه پایین و بالا برای تشخیص داده شدن به عنوان لبه
#  (اگر تصویر نویز زیادی داشته باشد باید این اعداد کوچکتر باشند)

edges = cv2.Canny(denoised_image, 55, 150)

# ============================================================================
# ============================================================================
# نمایش تصویر بدون نویز و تصویر تشخیص لبه

plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.title('Denoised Image')
plt.imshow(denoised_image, cmap='gray')

plt.subplot(1, 2, 2)
plt.title('Edges')
plt.imshow(edges, cmap='gray')
plt.show()









# ============================================================================
# ============================================================================
# شناسایی خطوط با استفاده از تبدیل هاف
# ارگومان اخری مشخص میکند که چه حجمی از نقاط برای تشخیص خط در نطر گرفته شود

lines = cv2.HoughLines(edges, 1, np.pi/180, 100)

# ============================================================================
# ============================================================================
# تابع برای رسم خطوط شناسایی شده بر روی تصویر

def draw_lines(img, lines):
    img_copy = img.copy()
    if lines is not None:
        for rho, theta in lines[:, 0]:
            a = np.cos(theta)
            b = np.sin(theta)
            x0 = a * rho
            y0 = b * rho
            x1 = int(x0 + 1000 * (-b))
            y1 = int(y0 + 1000 * (a))
            x2 = int(x0 - 1000 * (-b))
            y2 = int(y0 - 1000 * (a))
            cv2.line(img_copy, (x1, y1), (x2, y2), (0, 0, 255), 2)
    return img_copy
# ============================================================================
# ============================================================================
# رسم خطوط بر روی تصویر اصلی

image_with_lines = draw_lines(image, lines)

# ============================================================================
# ============================================================================
# نمایش تصویر بدون نویز و تصویر با خطوط شناسایی شده

plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.title('Denoised Image')
plt.imshow(denoised_image, cmap='gray')

plt.subplot(1, 2, 2)
plt.title('Image with Hough Lines')
plt.imshow(cv2.cvtColor(image_with_lines, cv2.COLOR_BGR2RGB))
plt.show()
